import java.util.Scanner;

public class Incy {
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_BLACK = "\u001B[30m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_GREEN = "\u001B[32m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_PURPLE = "\u001B[35m";
    public static final String ANSI_CYAN = "\u001B[36m";
    public static final String ANSI_WHITE = "\u001B[37m";

    public static final String ANSI_BLACK_BACKGROUND = "\u001B[40m";
    public static final String ANSI_RED_BACKGROUND = "\u001B[41m";
    public static final String ANSI_GREEN_BACKGROUND = "\u001B[42m";
    public static final String ANSI_YELLOW_BACKGROUND = "\u001B[43m";
    public static final String ANSI_BLUE_BACKGROUND = "\u001B[44m";
    public static final String ANSI_PURPLE_BACKGROUND = "\u001B[45m";
    public static final String ANSI_CYAN_BACKGROUND = "\u001B[46m";
    public static final String ANSI_WHITE_BACKGROUND = "\u001B[47m";

    public static final String LINE_STRING_TOP = ANSI_GREEN + "____________________________________________________________\n\n" ;
    public static final String LINE_STRING_BOTTOM = ANSI_GREEN + "____________________________________________________________\n" + ANSI_BLUE ;
    

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input;
        Task[] tasks = new Task[100];
        int taskCount = 0;
        String logo = "              [38;2;0;0;0mâ–„[38;2;0;0;0mâ–„   [38;2;0;0;0mâ–„[38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;189;189;189mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m        \n" + //
                        "    [38;2;0;0;0mâ–„[38;2;0;0;0mâ–„[38;2;0;0;0mâ–€     [38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;0;0;0m[48;2;255;255;255mâ–€[0m[38;2;0;0;0m[48;2;189;189;189mâ–€[0m[38;2;0;0;0m[48;2;189;189;189mâ–€[0m[38;2;189;189;189m[48;2;189;189;189mâ–€[0m[38;2;189;189;189m[48;2;189;189;189mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m         \n" + //
                        "  [38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€     [38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€[38;2;189;189;189m[48;2;0;0;0mâ–€[0m[38;2;189;189;189m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€         [38;2;0;0;0mâ–„\n" + //
                        "  [38;2;0;0;0mâ–€[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;0;0;0mâ–„ [38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;255;255;255mâ–€[0m[38;2;0;0;0m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;189;189;189mâ–€[0m[38;2;255;255;255m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€         [38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€\n" + //
                        "    [38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;189;189;189m[48;2;189;189;189mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m          [38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m \n" + //
                        "   [38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;255;255;255m[48;2;255;255;255mâ–€[0m[38;2;189;189;189m[48;2;65;65;65mâ–€[0m[38;2;189;189;189m[48;2;189;189;189mâ–€[0m[38;2;65;65;65m[48;2;189;189;189mâ–€[0m[38;2;0;0;0m[48;2;173;66;58mâ–€[0m[38;2;0;0;0mâ–„   [38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;115;115;99mâ–€[0m[38;2;0;0;0m[48;2;115;115;99mâ–€[0m[38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€[38;2;0;0;0mâ–€  \n" + //
                        "   [38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;173;66;58mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;255;255;255m[48;2;189;189;189mâ–€[0m[38;2;255;255;255m[48;2;189;189;189mâ–€[0m[38;2;189;189;189m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;255;255;255mâ–€[0m[38;2;90;197;189m[48;2;66;156;140mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;189;189;189m[48;2;173;66;58mâ–€[0m[38;2;214;90;66m[48;2;214;90;66mâ–€[0m[38;2;214;90;66m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;115;115;99mâ–€[0m[38;2;0;0;0m[48;2;115;115;99mâ–€[0m[38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;115;115;99m[48;2;65;65;65mâ–€[0m[38;2;115;115;99m[48;2;0;0;0mâ–€[0m[38;2;115;115;99m[48;2;115;115;99mâ–€[0m[38;2;115;115;99m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m    \n" + //
                        "    [38;2;0;0;0mâ–€[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;214;90;66m[48;2;173;66;58mâ–€[0m[38;2;214;90;66m[48;2;173;66;58mâ–€[0m[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;189;189;189m[48;2;0;0;0mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;255;132;99m[48;2;255;132;99mâ–€[0m[38;2;255;132;99m[48;2;214;90;66mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;115;115;99m[48;2;115;115;99mâ–€[0m[38;2;115;115;99m[48;2;115;115;99mâ–€[0m[38;2;115;115;99m[48;2;115;115;99mâ–€[0m[38;2;115;115;99m[48;2;115;115;99mâ–€[0m[38;2;115;115;99m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m [38;2;0;0;0mâ–€[38;2;0;0;0mâ–€[38;2;0;0;0mâ–€     \n" + //
                        "    [38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;255;132;99m[48;2;173;66;58mâ–€[0m[38;2;0;0;0m[48;2;255;132;99mâ–€[0m[38;2;0;0;0m[48;2;173;66;58mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0m[48;2;255;132;99mâ–€[0m[38;2;214;90;66m[48;2;255;132;99mâ–€[0m[38;2;173;66;58m[48;2;214;90;66mâ–€[0m[38;2;214;90;66m[48;2;214;90;66mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;115;115;99m[48;2;65;65;65mâ–€[0m[38;2;115;115;99m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m          \n" + //
                        " [38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€[38;2;0;0;0mâ–€[38;2;255;132;99m[48;2;0;0;0mâ–€[0m[38;2;255;132;99m[48;2;255;132;99mâ–€[0m[38;2;255;132;99m[48;2;214;90;66mâ–€[0m[38;2;173;66;58m[48;2;214;90;66mâ–€[0m[38;2;255;132;99m[48;2;214;90;66mâ–€[0m[38;2;214;90;66m[48;2;214;90;66mâ–€[0m[38;2;214;90;66m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€[38;2;0;0;0mâ–€[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;115;115;99mâ–€[0m[38;2;0;0;0m[48;2;115;115;99mâ–€[0m[38;2;0;0;0mâ–„[38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–„[38;2;0;0;0mâ–„ \n" + //
                        "[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€   [38;2;0;0;0mâ–€[38;2;214;90;66m[48;2;0;0;0mâ–€[0m[38;2;214;90;66m[48;2;0;0;0mâ–€[0m[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–„[38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;115;115;99m[48;2;115;115;99mâ–€[0m[38;2;115;115;99m[48;2;115;115;99mâ–€[0m[38;2;0;0;0m[48;2;115;115;99mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€[38;2;0;0;0mâ–€   \n" + //
                        " [38;2;0;0;0mâ–€[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€      [38;2;0;0;0mâ–„[38;2;0;0;0mâ–„[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0m[48;2;115;115;99mâ–€[0m[38;2;115;115;99m[48;2;65;65;65mâ–€[0m[38;2;115;115;99m[48;2;115;115;99mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€     \n" + //
                        "         [38;2;0;0;0m[48;2;0;0;0mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;65;65;65mâ–€[0m[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;0;0;0m[48;2;65;65;65mâ–€[0m[38;2;115;115;99m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€[38;2;115;115;99m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€        \n" + //
                        "          [38;2;0;0;0mâ–€ [38;2;0;0;0mâ–€[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€[38;2;65;65;65m[48;2;0;0;0mâ–€[0m[38;2;0;0;0mâ–€ [38;2;0;0;0mâ–€            \n" + //
                        "[0m\n";

        System.out.println(LINE_STRING_TOP + ANSI_CYAN + "Oi bruv! I'm\n" + logo + ANSI_CYAN + "Wotcha need from me today?\n" + LINE_STRING_BOTTOM);

        while (true) {
            input = scanner.nextLine();
            if ("bye".equalsIgnoreCase(input)) {
                break;
            } else if ("list".equalsIgnoreCase(input)) {
                handleListCommand(tasks, taskCount);
            } else if (input.startsWith("mark ")) {
                handleMarkCommand(input, tasks, taskCount, true);
            } else if (input.startsWith("unmark ")) {
                handleMarkCommand(input, tasks, taskCount, false);
            } else {
                handleAddTask(input, tasks, taskCount);
                taskCount++;
            }
        }

        System.out.println(LINE_STRING_TOP + ANSI_CYAN + "Cya later mate!\n" + LINE_STRING_BOTTOM);
        scanner.close();
    }

    private static void handleListCommand(Task[] tasks, int taskCount) {
        System.out.println(LINE_STRING_BOTTOM);
        if (taskCount == 0) {
            System.out.println(ANSI_RED + "Blimey, your list is empty, innit?\n");
        } else {
            for (int i = 0; i < taskCount; i++) {
                System.out.println(ANSI_CYAN + (i + 1) + ". " + tasks[i]);
            }
        }
        System.out.println(LINE_STRING_BOTTOM);
    }

    private static void handleMarkCommand(String input, Task[] tasks, int taskCount, boolean markAsDone) {
        int index = Integer.parseInt(input.substring(markAsDone ? 5 : 7)) - 1;
        if (index >= 0 && index < taskCount) {
            if (markAsDone) {
                tasks[index].markAsDone();
            } else {
                tasks[index].markAsNotDone();
            }
            System.out.println(LINE_STRING_TOP + ANSI_CYAN + "Done with this one:\n  " + tasks[index] + "\n" + LINE_STRING_BOTTOM);
        }
    }

    private static void handleAddTask(String input, Task[] tasks, int taskCount) {
        if (taskCount >= tasks.length) {
            System.out.println(LINE_STRING_TOP + ANSI_RED + "The list is full. Can't add more tasks!\n" + LINE_STRING_BOTTOM);
        } else {
            tasks[taskCount] = new Task(input);
            System.out.println(LINE_STRING_TOP + ANSI_CYAN + "Task added: " + input + "\n" + LINE_STRING_BOTTOM);
        }
    }
}